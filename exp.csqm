#if !defined(EXP_CSQM)
#define EXP_CSQM
    #include "basic.csqm"
    
    /// @brief This class represents exponents
    class exponents{
        priv
            // //power cal
            // def cal_power(double base, int pow_){
            //     long double val = 1;
            //     for(int i=0;i<pow_;i++){
            //         val *= base;
            //     }
            //     return val;
            // }
        pub
            //Variables
            long double val = 1;
            double base = 0;
            /// @brief Constuctor for nothing passed.
            exponents(){}
            /// @brief Constuctor with base passed.
            /// @param base base for the exponent.
            exponents(double base){this->base = base;}
            /// @brief Constuctor with base and power passed
            /// @param base base for the exponent.
            /// @param exp power.
            exponents(double base, double exp){this->val = power(base,exp);}
            /// @brief Constuctor with exponent passed.
            exponents(const exponents& exp){this->val = exp.val;this->base = exp.base;}
            //This operator calculates value and returns it by using exponential rule;
            def operator^(int pow){return power(this->base,pow);}
            //Assignment of exponent data type.
            def operator=(exponents exp){this->val = exp.val;this->base = exp.base;}
    };
    //override print&println function.
    def tostr(exponents exp){
        // printf("%Lf",lf);
        return to_str(exp.val);
    }
    //print function to print long numbers;
    def printn(long double lf){
        printf("%Lf",lf);
    }

#endif // EXP_CSQM