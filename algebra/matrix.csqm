/**
 * @file matrix.csqm
 * @author Aniket Kumar (geek.aniket.coder@gmail.com)
 * @brief This module will help to use algebraic matrix with built-in utilities.
 * @version 0.1
 * @date 2022-10-24
 * 
 * @copyright Copyright (c) 2022
 * 
 */
#if !defined(MATRIX_CSQM)
#define MATRIX_CSQM
#include "../basic.csqm"

    /**
     * @brief This class is made to work with matrix.
     * 
     */
    class matrix{
        pub
            //2D array storing the data.
            array<array<double>> arr;
            /**
             * @brief Constructor with no arguments.
             * 
             */
            constructor(matrix)(){}
            /**
             * @brief Constuctor with 2D array as argument
             * @param arr 2D array of type double for the matrix.
             */
            constructor(matrix)(array<array<double>> arr){
                //Checking for exception.
                int prev_len = arr[0].len();
                for(var e : arr){
                    if(prev_len != e.len()){
                        raise(exception::data_len_exception());
                    }
                }
                //proceeding further.
                for(var e : arr){
                    this->arr.add(e);
                }
            }
            /**
             * @brief Constuctor with 2D array as argument
             * @param arr 2D array of type int for the matrix.
             */
            constructor(matrix)(array<array<int>> arr){
                //Checking for exception.
                int prev_len = arr[0].len();
                for(var e : arr){
                    if(prev_len != e.len()){
                        raise(exception::data_len_exception());
                    }
                }
                for(var e : arr){
                    this->arr.add(e.todouble());
                }
            }

            /**
             * @brief Construct a new add object
             * 
             * @param n number to be added
             */
            __add__(double n){
                array<array<double>> arr;
                for(var i :this->arr){
                    array<double> a;
                    for(var j : i){
                        a.add(n+j);
                    }   
                    arr.add(a);
                }
                return matrix(arr);
            }
            /**
             * @brief Construct a new multiply object
             * 
             * @param n number to be multiplied
             */
            __mul__(double n){
                // matrix mt;
                array<array<double>> arr;
                for(var i :this->arr){
                    array<double> a;
                    for(var j : i){
                        a.add(n*j);
                    }   
                    arr.add(a);
                }
                return matrix(arr);
            }
            /**
             * @brief Construct a new div object
             * 
             * @param n number to be divided.
             */
            __div__(double n){
                array<array<double>> arr;
                for(var i :this->arr){
                    array<double> a;
                    for(var j : i){
                        a.add(j/n);
                    }   
                    arr.add(a);
                }
                return matrix(arr);
            }

            //                          Methods                      //
            /*********************************************************/
            //This method returns an array of dimensions in the form of row, column.
            def dim(){
                return array<int>({this->arr.len(),this->arr[0].len()});
            }
            //This method will transpose the matrix.
            def transpose(){
                double t[this->arr[0].len()][this->arr.len()];
                for(int i = 0;i<arr.len();i++){
                    for(int j = 0;j<arr[0].len();j++){
                        t[j][i] = arr[i][j];
                    }
                }
                array<array<double>> r;
                for(int i = 0;i<this->arr[0].len();i++){
                    array<double> d1;
                    for(int j = 0;j<this->arr.len();j++){
                        d1.add(t[i][j]);
                    }
                    r.add(d1);
                }
                return r;
            }
    };

    //overloading tostr function to make matrix printable.
    def tostr(matrix mt){
        str s;
        for(var i : mt.arr){
            for(var j : i){
                s += to_str(j) + ",";
            }
            s += "\n";
        }
        return s;
    }

#endif // MATRIX_CSQM
